#!/usr/bin/env node
// üéµ Claude Code + Cipher Bridge
// Claude Code„ÅåÈñãÁô∫Ë®òÊÜ∂„ÇíÊ¥ªÁî®„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„ÇãMCP„Éñ„É™„ÉÉ„Ç∏

const { spawn } = require('child_process');
const path = require('path');

class ClaudeCipherBridge {
  constructor() {
    this.projectRoot = process.cwd();
    this.cipherConfig = path.join(this.projectRoot, 'memAgent/cipher.yml');
  }

  // Cipher„ÅÆË®òÊÜ∂„ÇíÊ§úÁ¥¢
  async searchMemory(query, options = {}) {
    return new Promise((resolve, reject) => {
      const { includeContext = true, maxResults = 5 } = options;
      
      console.log(`üß† Cipher„É°„É¢„É™Ê§úÁ¥¢: "${query}"`);
      
      // CipherÁµåÁî±„ÅßË®òÊÜ∂Ê§úÁ¥¢
      const cipherProcess = spawn('cipher', [
        '-a', this.cipherConfig,
        `ÈÅéÂéª„ÅÆÈñãÁô∫Ë®òÊÜ∂„Åã„Çâ„Äå${query}„Äç„Å´Èñ¢ÈÄ£„Åô„ÇãÊÉÖÂ†±„ÇíÊ§úÁ¥¢„Åó„Å¶„ÄÅÁ∞°ÊΩî„Å´ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
      ], {
        env: { 
          ...process.env,
          OPENAI_API_KEY: process.env.OPENAI_API_KEY 
        }
      });

      let output = '';
      let error = '';

      cipherProcess.stdout.on('data', (data) => {
        output += data.toString();
      });

      cipherProcess.stderr.on('data', (data) => {
        error += data.toString();
      });

      cipherProcess.on('close', (code) => {
        if (code === 0) {
          // Cipher„ÅÆÂá∫Âäõ„Åã„ÇâÊúâÁî®„Å™ÊÉÖÂ†±„ÇíÊäΩÂá∫
          const cleanOutput = this.extractUsefulInfo(output);
          resolve({
            success: true,
            memory: cleanOutput,
            source: 'cipher'
          });
        } else {
          resolve({
            success: false,
            error: error,
            fallback: `CipherË®òÊÜ∂„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„Åå„ÄÅ„Äå${query}„Äç„Å´„Å§„ÅÑ„Å¶‰ª•‰∏ã„ÅÆÂü∫Êú¨ÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„ÅôÔºö`
          });
        }
      });
    });
  }

  // Neo4jÁü•Ë≠ò„Ç∞„É©„Éï„Åã„ÇâÊ§úÁ¥¢
  async searchKnowledgeGraph(query) {
    return new Promise((resolve, reject) => {
      console.log(`üìä Neo4jÁü•Ë≠òÊ§úÁ¥¢: "${query}"`);
      
      const neo4jProcess = spawn('node', [
        path.join(this.projectRoot, 'simple-knowledge-query.js')
      ], {
        env: { ...process.env }
      });

      let output = '';
      
      neo4jProcess.stdout.on('data', (data) => {
        output += data.toString();
      });

      neo4jProcess.on('close', (code) => {
        if (code === 0 && output.includes('‚úÖ')) {
          resolve({
            success: true,
            knowledge: this.extractKnowledgeInfo(output),
            source: 'neo4j'
          });
        } else {
          resolve({
            success: false,
            error: `Neo4jÁü•Ë≠ò„Ç∞„É©„Éï„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü`
          });
        }
      });
    });
  }

  // ÈñãÁô∫Ë®òÊÜ∂„ÇíÂ≠¶Áøí
  async learnFromDevelopment(sessionSummary, insights = []) {
    console.log('üìö ÈñãÁô∫Ë®òÊÜ∂„ÇíÂ≠¶Áøí‰∏≠...');
    
    const learningPrompt = `
‰ªäÊó•„ÅÆÈñãÁô∫„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíË®òÊÜ∂„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

„Çª„ÉÉ„Ç∑„Éß„É≥Ê¶ÇË¶Å: ${sessionSummary}

Â≠¶„Çì„Å†„Åì„Å®„ÉªÊ∞ó„Å•„Åç:
${insights.map(insight => `- ${insight}`).join('\n')}

„Åì„ÅÆÊÉÖÂ†±„Çí‰ªäÂæå„ÅÆÈñãÁô∫„Å´Ê¥ªÁî®„Åß„Åç„Çã„Çà„ÅÜË®òÊÜ∂„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    `.trim();

    return this.searchMemory(learningPrompt, { action: 'learn' });
  }

  // Áµ±ÂêàÊ§úÁ¥¢ÔºàË®òÊÜ∂ + Áü•Ë≠ò„Ç∞„É©„ÉïÔºâ
  async enhancedSearch(query) {
    console.log(`üéµ Áµ±ÂêàÊ§úÁ¥¢ÈñãÂßã: "${query}"`);
    
    const [memoryResult, knowledgeResult] = await Promise.all([
      this.searchMemory(query),
      this.searchKnowledgeGraph(query)
    ]);

    return {
      query,
      memory: memoryResult,
      knowledge: knowledgeResult,
      combined: this.combineResults(memoryResult, knowledgeResult)
    };
  }

  // ÁµêÊûúÁµ±Âêà
  combineResults(memoryResult, knowledgeResult) {
    let combined = `üéØ „Äå${arguments[0] || 'query'}„Äç„Å´Èñ¢„Åô„ÇãÁµ±ÂêàÊÉÖÂ†±:\n\n`;
    
    if (memoryResult.success) {
      combined += `üß† ÈÅéÂéª„ÅÆË®òÊÜ∂„Åã„Çâ:\n${memoryResult.memory}\n\n`;
    }
    
    if (knowledgeResult.success) {
      combined += `üìä „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁü•Ë≠ò„Åã„Çâ:\n${knowledgeResult.knowledge}\n\n`;
    }
    
    if (!memoryResult.success && !knowledgeResult.success) {
      combined += `‚ùå Ë®òÊÜ∂„ÉªÁü•Ë≠ò„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂü∫Êú¨ÁöÑ„Å™ÊÉÖÂ†±„ÅßÂõûÁ≠î„Åó„Åæ„Åô„ÄÇ`;
    }
    
    return combined;
  }

  // ÊúâÁî®ÊÉÖÂ†±ÊäΩÂá∫
  extractUsefulInfo(cipherOutput) {
    // Cipher„ÅÆÂá∫Âäõ„Åã„ÇâÂÆüÈöõ„ÅÆAIÂõûÁ≠îÈÉ®ÂàÜ„ÇíÊäΩÂá∫
    const lines = cipherOutput.split('\n');
    const aiResponseStart = lines.findIndex(line => line.includes('ü§ñ AI Response'));
    const aiResponseEnd = lines.findIndex(line => line.includes('‚îî‚îÄ‚îÄ'));
    
    if (aiResponseStart !== -1 && aiResponseEnd !== -1) {
      return lines.slice(aiResponseStart + 2, aiResponseEnd)
        .map(line => line.replace(/^‚îÇ\s*/, '').trim())
        .filter(line => line.length > 0)
        .join('\n');
    }
    
    return cipherOutput.substring(0, 500) + '...';
  }

  // Áü•Ë≠òÊÉÖÂ†±ÊäΩÂá∫
  extractKnowledgeInfo(neo4jOutput) {
    const lines = neo4jOutput.split('\n');
    const relevantLines = lines.filter(line => 
      line.includes('‚úÖ') || line.includes('ÂÆüË£Ö:') || line.includes('ÊäÄË°ì:')
    );
    return relevantLines.join('\n');
  }
}

// CLIÂÆüË°å
if (require.main === module) {
  const bridge = new ClaudeCipherBridge();
  const query = process.argv[2] || 'TypeMate„Éô„ÇØ„Éà„É´Ê§úÁ¥¢ÂÆüË£Ö';
  
  console.log('üéµ Claude Code + Cipher Bridge Ëµ∑Âãï');
  console.log('=====================================');
  
  bridge.enhancedSearch(query)
    .then(result => {
      console.log('\n' + result.combined);
      console.log('\nüéâ Áµ±ÂêàÊ§úÁ¥¢ÂÆå‰∫Ü!');
    })
    .catch(error => {
      console.error('‚ùå „Ç®„É©„Éº:', error);
    });
}

module.exports = ClaudeCipherBridge;